from flask import Flask, render_template, url_for, redirect
from flask_sqlalchemy import SQLAlchemy
from config import sqlalchemyurl
import datetime
import pandas as pd
from markupsafe import Markup
import re
app = Flask(__name__, instance_relative_config=True)
app.config['SQLALCHEMY_DATABASE_URI'] = sqlalchemyurl
db = SQLAlchemy(app)
from collections import OrderedDict, defaultdict
import json
from itertools import groupby

class Main(db.Model):
    mainid = db.Column(db.Integer(), primary_key=True)
    ticker = db.Column(db.String(15))
    company_name = db.Column(db.String(50))
    avg_optvol = db.Column(db.Float)
    market_cap = db.Column(db.Float)
    avg_stockvol = db.Column(db.Float)

class earningsdates(db.Model):
    earningsdateid = db.Column(db.Integer(), primary_key=True)
    ticker = db.Column(db.String(15))
    exactearningsdate = db.Column(db.String())

theticker =  Main.query.filter_by(ticker = ticker).first()
companyname = theticker.company_name
avg_optvol = theticker.avg_optvol
market_cap = theticker.market_cap
avg_stockvol = theticker.avg_stockvol
theticker = theticker.ticker

edate = earningsdates.query.filter_by(ticker = ticker).first()
exactearningsdate = edate.exactearningsdate
thisticker = edate.ticker
now = datetime.datetime.now()
sidebars = earningsdates.query \
    .with_entities(earningsdates.ticker, earningsdates.exactearningsdate) \
    .filter(earningsdates.exactearningsdate > now).order_by(earningsdates.ticker).all()

for sidebar in sidebars:
    print(sidebar['exactearningsdate'], ':', sidebar['ticker'])

lists = {}

for k, g in groupby(sidebars, key=lambda t: t['exactearningsdate']):
    lists[k] = list(g)